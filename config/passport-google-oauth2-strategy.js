const passport = require("passport");
const googleStrategy = require("passport-google-oauth").OAuth2Strategy;
const crypto = require("crypto");
const env = require('./environment');

const User = require("../models/user");

// tell passport to use a new strategy that for google login
passport.use(new googleStrategy({
        clientID: env.google_client_id,
        clientSecret: env.google_client_secret,
        callbackURL: env.google_callback_url,
    },
    function (accessToken, refreshToken, profile, done) {
        // Find a user
        User.findOne({ email: profile.emails[0].value }).exec(function (err, user) {
            if (err) { console.log('Error in passort-google strategy', err); return; }
            
            console.log(profile)

            // If found user, set this user as req.user
            if (user) {
                return done(null, user);
            } else {
                // If not found, then create user and set it as req.user, password is generated by crypto
                User.create({
                    name: profile.displayName,
                    email: profile.emails[0].value,
                    password: crypto.randomBytes(20).toString('hex')
                }, function (err, user) {
                    if (err) {
                        console.log("Error in creating user passort-google strategy", err);
                        return;
                    }
                    else {
                        return done(null, user);
                    }
                });
            }
        });
    }
));

module.exports = passport;
